[build-system]
requires = ["poetry-core>=1.7.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.urls]
documentation = "https://github.com/ksquarekumar/whisper-stream#readme"
repository = "https://github.com/ksquarekumar/whisper-stream"
source = "https://github.com/ksquarekumar/whisper-stream"
license = "https://github.com/ksquarekumar/whisper-stream#LICENSE"
issues = "https://github.com/ksquarekumar/whisper-stream/issues"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "jax_cuda"
url = "https://storage.googleapis.com/jax-releases/jax_cuda_releases.html"
priority = "explicit"

[[tool.poetry.source]]
name = "torch_cu118"
url = "https://download.pytorch.org/whl/cu118"
priority = "explicit"

[tool.poetry]
name = "whisper-stream"
version = "0.0.5"
description = "\"packages and applications for asr-inferencing using `openai-whisper`\""
readme = "README.md"
license = "Apache License 2.0"
keywords = ["whisper", "jax", "pytorch"]
authors = ["krishnakumar <ksquarekumar@gmail.com>"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
]
packages = [
  { include = "whisper_stream/core", from = "." },
  { include = "whisper_stream/vendored", from = "." },
  { include = "whisper_stream/projects/jax_pipelines", from = "." },
  { include = "whisper_stream/projects/faster_whisper_api", from = "." },
]

[tool.poetry.dependencies]
python = ">=3.11,<=3.12"
# all optionals
# specific to projects/jax_pipelines
whisper-stream-jax-pipelines = { path = "./projects/jax-pipelines", develop = true, optional = true }
# specific to projects/faster_whisper_api
whisper-stream-faster-whisper-api = { path = "./projects/faster-whisper-api", develop = true, optional = true }
# true optionals
datasets = { version = "*", optional = true, extras = [] }
torch = { version = ">=2.0.0", optional = true, python = "^3.11", markers = "extra=='cuda'", source = "torch_cu118" }
filprofiler = { version = ">=2023.3.1", optional = true }
viztracer = { version = ">=0.15.6", optional = true }
nvidia-pytriton = { version = ">=0.2.5", optional = true }

[tool.poetry.extras]
jax_pipelines = ["whisper-stream-jax-pipelines"]
faster_whisper_api = ["whisper-stream-faster-whisper-api"]
benchmarks = ["datasets", "torch"]
debug = ["filprofiler", "viztracer"]
triton = ["nvidia-pytriton"]
all = [
  "whisper-stream-jax-pipelines",
  "whisper-stream-faster-whisper-api",
  "datasets",
  "torch",
  "filprofiler",
  "viztracer",
  "nvidia-pytriton",
]

[tool.poetry.group.test.dependencies]
coverage = { version = ">=7.3.1", extras = ["toml"] }
pytest = ">=7.4.2"
locust = ">=2.16.1"
gevent = ">=23.9.0"
geventhttpclient = ">=2.0.0"
requests = "2.31.0"

[tool.poetry.group.dev.dependencies]
black = ">=23.7.0"
mypy = ">=1.5.0"
ruff = ">=0.0.286"
nbqa = ">=1.7.0"
pre-commit = ">=3.4.0"
pyclean = ">=2.7.4"
commitizen = ">=3.7.0"
watchdog = "*"
types_ujson = "*"
types-tabulate = "*"
types-PyYAML = "*"
types-requests = "*"
types-urllib3 = "*"
types-decorator = "*"
types-six = "*"
types-Pygments = "*"
types-colorama = "*"
types-jsonschema = "*"
types-setuptools = "*"
types-docutils = "*"
jupyter = ">=1.0.0"
ipykernel = ">=6.25.0"
ipython = ">=8.14.0"
nbconvert = ">=7.7.4"
jupyter_contrib_nbextensions = "*"
jupyter_nbextensions_configurator = "*"
tqdm = "*"
ipywidgets = "*"

[tool.poetry.scripts]
download_files_from_s3_and_rename = "whisper_stream.core.utils.s3_utils:download_files_from_s3_and_rename_cli"
launch_faster_whisper_api = { reference = "whisper_stream.projects.faster_whisper_api.__main__:main", type = "console" }

[tool.black]
target-version = ["py311"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = ["ALL"]
ignore = [
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`
  "D211",
  # (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`
  "D213",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]
fix = true

[tool.ruff.isort]
known-first-party = ["whisper_stream"]
combine-as-imports = true
case-sensitive = true
force-sort-within-sections = true
lines-after-imports = 2
split-on-trailing-comma = false

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"development/notebooks/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
strict = true
namespace_packages = true
explicit_package_bases = true
# do not use relative paths
exclude = [
  'whisper_stream/vendored/',
  'whisper_stream/vendored/whisper_jax',
  'development/notebooks/',
]
warn_unreachable = true
pretty = true
follow_imports = "normal"
ignore_missing_imports = true
# Know exactly what you're doing
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
show_absolute_path = true
# Ensure Full Coverage
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
# Restrict dynamic typing
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true
# Explicit is better than implicit
strict_equality = true
strict_optional = true
no_implicit_optional = true
# third party decorators
allow_any_decorated = false
allow_untyped_decorators = true

[[tool.mypy.overrides]]
module = 'tests'
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = 'whisper_stream.vendored'
follow_imports = "skip"
ignore_errors = true

[[tool.mypy.overrides]]
module = 'whisper_stream.vendored.whisper_jax'
follow_imports = "skip"
ignore_errors = true

[[tool.mypy.overrides]]
module = 'faster_whisper'
follow_imports = "skip"
allow_untyped_calls = true
allow_untyped_defs = true

[tool.coverage.run]
source_pkgs = [
  "whisper_stream.core",
  "whisper_stream.projects.pipelines_jax",
  "whisper_stream.projects.faster_whisper_api",
]
branch = true
parallel = true

[tool.coverage.paths]
whisper-stream-core = ["whisper_stream/core"]
whisper-stream-jax-pipelines = ["/whisper_stream/projects/jax_pipelines"]
whisper-stream-faster-whisper-api = [
  "whisper_stream/projects/faster_whisper_api",
]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
