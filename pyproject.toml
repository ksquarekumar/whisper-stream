[build-system]
requires = ["flit_core >=3.9,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "whisper-stream"
dynamic = ["version"]
description = '"Inferencing Endpoint on Whisper"'
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENSE" }
keywords = ["whisper", "jax", "pytorch"]
authors = [{ name = "krishnakumar", email = "ksquarekumar@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "structlog>=23.1.0",
  "orjson>=3.9.5",
  "flax>=0.7.2",
  "joblib>=1.3.2",
  "pathos>=0.3.1",
  "dill>=0.3.7",
  "accelerate>=0.20.3",
  "transformers",
  "cached-property>=1.5.2",
]

[project.optional-dependencies]
triton = ["nvidia-pytriton>=0.2.5"]
ctranslate = ["ctranslate2>=3.18.0", "faster-whisper"]
data = ["boto3", "click>=8.1.7", "soundfile", "librosa"]
benchmarks = ["datasets>=2.14.4"]
dev = [
  "whisper-stream",
  "black>=23.7.0",
  "mypy>=1.5.1",
  "ruff>=0.0.286",
  "hatchling>=1.18.0",
  "flit>=3.9.0",
  "build",
  "cffi",
  "pre-commit>=3.3.3",
  "commitizen",
  "watchdog",
  "jupyter>=1.0.0",
  "ipykernel>=6.25.0",
  "ipython>=8.14.0",
  "nbconvert>=7.7.4",
  "jupyter_contrib_nbextensions",
  "jupyter_nbextensions_configurator",
  "tqdm",
  "nbqa>=1.7.0",
  "ipywidgets",
  "types-PyYAML",
  "types-requests",
  "types-urllib3",
  "types-decorator",
  "types-six",
  "types-Pygments",
  "types-colorama",
  "types-jsonschema",
  "types-setuptools",
  "types-docutils"
]
test = ["coverage[toml]>=6.5", "pytest"]

[project.urls]
Documentation = "https://github.com/ksquarekumar/whisper-stream#readme"
Issues = "https://github.com/ksquarekumar/whisper-stream/issues"
Source = "https://github.com/ksquarekumar/whisper-stream"

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 120
select = ["ALL"]
ignore = [
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`
  "D211",
  # (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`
  "D213"
]
unfixable = [
  # Don't touch unused imports
  "F401"
]
fix = true

[tool.ruff.isort]
known-first-party = ["whisper_stream", "whisper_stream.vendored"]
combine-as-imports = true
case-sensitive = true
force-sort-within-sections = true
lines-after-imports = 2
split-on-trailing-comma = false

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
follow_imports = "normal"
ignore_missing_imports = true
exclude = ["notebooks", "whisper_stream/vendored"]
# Know exactly what you're doing
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
show_absolute_path = true
# Ensure Full Coverage
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
# Restrict dynamic typing
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true
# Explicit is better than implicit
strict_equality = true
strict_optional = true
no_implicit_optional = true
# third party decorators
allow_any_decorated = false
allow_untyped_decorators = true

# It's hard to make tests compliant using unittest.mock
[[tool.mypy.overrides]]
module = 'tests'
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = 'whisper_stream.whisper_jax'

[tool.coverage.run]
source_pkgs = ["whisper_stream", "tests"]
branch = true
parallel = true
omit = ["whisper_stream/__about__.py"]

[tool.coverage.paths]
whisper_stream = ["whisper_stream", "*/whisper-stream/whisper_stream"]
tests = ["tests", "*/whisper-stream/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[project.scripts]
get_version = "whisper_stream.__init__:get_version"
bulk_download_s3 = "whisper_stream.utils.s3_utils:download_files_from_s3_and_rename"
