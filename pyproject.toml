[build-system]
requires = ["poetry-core>=1.7.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.urls]
documentation = "https://github.com/ksquarekumar/whisper-stream#readme"
repository = "https://github.com/ksquarekumar/whisper-stream"
source = "https://github.com/ksquarekumar/whisper-stream"
license = "https://github.com/ksquarekumar/whisper-stream#LICENSE"
issues = "https://github.com/ksquarekumar/whisper-stream/issues"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "jax_cuda"
url = "https://storage.googleapis.com/jax-releases/jax_cuda_releases.html"
priority = "explicit"

[tool.poetry]
name = "whisper-stream"
version = "0.0.4"
description = "\"packages and applications for asr-inferencing using `openai-whisper`\""
readme = "README.md"
license = "Apache License 2.0"
keywords = ["whisper", "jax", "pytorch"]
authors = ["krishnakumar <ksquarekumar@gmail.com>"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
]

[tool.poetry.dependencies]
python = ">=3.11,<=3.12"
joblib = ">=1.3.2"
pathos = ">=0.3.1"
dill = ">=0.3.7"
structlog = ">=23.1.0"
orjson = ">=3.9.5"
cached_property = ">=1.5.2"
click = ">=8.1.7"
boto3 = ">=1.28.38"
librosa = ">=0.10.1"
soundfile = ">=0.12.1"
transformers = { version = ">=4.32.1" }
flax = { version = ">=0.7.0", optional = true }
jaxlib = { version = "==0.4.13+cuda11.cudnn86", source = "jax_cuda", optional = true }
jax = { version = "*", optional = true }
datasets = { version = "*", optional = true, extras = [] }
torch = { version = ">=2.0.0", optional = true, python = "^3.11", markers = "extra=='cuda'" }
nvidia-pytriton = { version = ">=0.2.5", optional = true }
ctranslate2 = { version = ">=3.18.0", optional = true }
faster-whisper = { version = ">=0.8.0", optional = true }
filprofiler = { version = ">=2023.3.1", optional = true }
viztracer = { version = ">=0.15.6", optional = true }

[tool.poetry.extras]
service_jax = ["flax", "jax", "jaxlib"]
debug = ["filprofiler", "viztracer"]
benchmarks = ["datasets", "torch"]
triton = ["nvidia-pytriton"]
ctranslate2 = ["ctranslate2"]
faster-whisper = ["ctranslate2", "faster-whisper", "torch"]

[tool.poetry.group.test.dependencies]
coverage = { version = ">=6.5", extras = ["toml"] }
pytest = ">=7.4.0"

[tool.poetry.group.dev.dependencies]
black = ">=23.7.0"
mypy = ">=1.5.0"
ruff = ">=0.0.286"
nbqa = ">=1.7.0"
pre-commit = ">=3.4.0"
pyclean = ">=2.7.4"
commitizen = ">=3.7.0"
watchdog = "*"
types-tabulate = "*"
types-PyYAML = "*"
types-requests = "*"
types-urllib3 = "*"
types-decorator = "*"
types-six = "*"
types-Pygments = "*"
types-colorama = "*"
types-jsonschema = "*"
types-setuptools = "*"
types-docutils = "*"
jupyter = ">=1.0.0"
ipykernel = ">=6.25.0"
ipython = ">=8.14.0"
nbconvert = ">=7.7.4"
jupyter_contrib_nbextensions = "*"
jupyter_nbextensions_configurator = "*"
tqdm = "*"
ipywidgets = "*"

[tool.black]
target-version = ["py311"]
line-length = 88
skip-string-normalization = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = ["ALL"]
ignore = [
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  # (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `one-blank-line-before-class`
  "D211",
  # (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`
  "D213",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]
fix = true

[tool.ruff.isort]
known-first-party = ["whisper_stream.core", "whisper_stream.jax_pipelines"]
combine-as-imports = true
case-sensitive = true
force-sort-within-sections = true
lines-after-imports = 2
split-on-trailing-comma = false

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"whisper-stream/tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
follow_imports = "normal"
exclude = ['^notebooks/.*', '^sagemaker/.*', '^whisper-stream/vendored/.*py$']
ignore_missing_imports = true
# Know exactly what you're doing
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
show_absolute_path = true
# Ensure Full Coverage
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
# Restrict dynamic typing
disallow_any_generics = true
disallow_subclassing_any = true
warn_return_any = true
# Explicit is better than implicit
strict_equality = true
strict_optional = true
no_implicit_optional = true
# third party decorators
allow_any_decorated = false
allow_untyped_decorators = true

[[tool.mypy.overrides]]
module = 'tests'
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = 'whisper_stream.vendored.*'
ignore_errors = true

[tool.coverage.run]
source_pkgs = ["whisper_stream"]
branch = true
parallel = true
omit = ["whisper-stream/vendored/**/*", "tests/**/*"]

[tool.coverage.paths]
whisper-stream = ["whisper-stream/core", "whisper-stream/pipelines"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
